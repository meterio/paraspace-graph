# PoolCore
type PoolCoreBorrowEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
  onBehalfOf: Bytes!
  amount: BigInt!
  borrowRate: BigInt!
  referralCode: Int!
}
type PoolCoreFlashClaimEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  target: Bytes!
  initiator: Bytes!
  nftAsset: Bytes!
  tokenId: BigInt!
}
type PoolCoreLiquidateERC20Entity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  collateralAsset: Bytes!
  liquidationAsset: Bytes!
  borrower: Bytes!
  liquidationAmount: BigInt!
  liquidatedCollateralAmount: BigInt!
  liquidator: Bytes!
  receivePToken: Boolean!
}
type PoolCoreLiquidateERC721Entity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  collateralAsset: Bytes!
  liquidationAsset: Bytes!
  borrower: Bytes!
  liquidationAmount: BigInt!
  liquidatedCollateralTokenId: BigInt!
  liquidator: Bytes!
  receiveNToken: Boolean!
}
type PoolCoreRepayEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
  repayer: Bytes!
  amount: BigInt!
  usePTokens: Boolean!
}
type PoolCoreReserveUsedAsCollateralDisabledEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
}
type PoolCoreReserveUsedAsCollateralEnabledEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
}
type PoolCoreSupplyEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
  onBehalfOf: Bytes!
  amount: BigInt!
  referralCode: Int!
}
type PoolCoreSupplyERC721TokenData @entity(immutable: true) {
  id: ID!
  tokenId: BigInt!
  useAsCollateral: Boolean!
}
type PoolCoreSupplyERC721Entity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
  onBehalfOf: Bytes!
  tokenData: [PoolCoreSupplyERC721TokenData!]!
  referralCode: Int!
  fromNToken: Boolean!
}
type PoolCoreWithdrawEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
  to: Bytes!
  amount: BigInt!
}
type PoolCoreWithdrawERC721Entity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  reserve: Bytes!
  user: Bytes!
  to: Bytes!
  tokenIds: [BigInt!]!
}
# PoolMarketplace
type PoolMarketplaceAcceptBidWithCreditOrderInfoOffer @entity(immutable: true) {
  id: ID!
  itemType: Int!
  token: Bytes!
  identifierOrCriteria: BigInt!
  startAmount: BigInt!
  endAmount: BigInt!
}
type PoolMarketplaceAcceptBidWithCreditOrderInfoConsideration
  @entity(immutable: true) {
  id: ID!
  itemType: Int!
  token: Bytes!
  identifierOrCriteria: BigInt!
  startAmount: BigInt!
  endAmount: BigInt!
  recipient: Bytes!
}
type PoolMarketplaceAcceptBidWithCreditOrderInfo @entity(immutable: true) {
  id: ID!
  maker: Bytes!
  taker: Bytes!
  tid: Bytes!
  offer: [PoolMarketplaceAcceptBidWithCreditOrderInfoOffer!]!
  consideration: [PoolMarketplaceAcceptBidWithCreditOrderInfoConsideration!]!
}
type PoolMarketplaceAcceptBidWithCreditCredit @entity(immutable: true) {
  id: ID!
  token: Bytes!
  amount: BigInt!
  orderId: Bytes!
  v: Int!
  r: Bytes!
  s: Bytes!
}
type PoolMarketplaceAcceptBidWithCreditEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  marketplaceId: Bytes!
  orderInfo: PoolMarketplaceAcceptBidWithCreditOrderInfo
  credit: PoolMarketplaceAcceptBidWithCreditCredit
}
type PoolMarketplaceBuyWithCreditOrderInfoOffer @entity(immutable: true) {
  id: ID!
  itemType: Int!
  token: Bytes!
  identifierOrCriteria: BigInt!
  startAmount: BigInt!
  endAmount: BigInt!
}
type PoolMarketplaceBuyWithCreditOrderInfoConsideration
  @entity(immutable: true) {
  id: ID!
  itemType: Int!
  token: Bytes!
  identifierOrCriteria: BigInt!
  startAmount: BigInt!
  endAmount: BigInt!
  recipient: Bytes!
}
type PoolMarketplaceBuyWithCreditOrderInfo @entity(immutable: true) {
  id: ID!
  maker: Bytes!
  taker: Bytes!
  tid: Bytes!
  offer: [PoolMarketplaceBuyWithCreditOrderInfoOffer!]!
  consideration: [PoolMarketplaceBuyWithCreditOrderInfoConsideration!]!
}
type PoolMarketplaceBuyWithCreditCredit @entity(immutable: true) {
  id: ID!
  token: Bytes!
  amount: BigInt!
  orderId: Bytes!
  v: Int!
  r: Bytes!
  s: Bytes!
}
type PoolMarketplaceBuyWithCreditEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  marketplaceId: Bytes!
  orderInfo: PoolMarketplaceBuyWithCreditOrderInfo
  credit: PoolMarketplaceBuyWithCreditCredit
}
# PoolConfigurator
type PoolConfiguratorBorrowCapChangedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldBorrowCap: BigInt!
  newBorrowCap: BigInt!
}
type PoolConfiguratorCollateralConfigurationChangedEntity
  @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  ltv: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
}
type PoolConfiguratorLiquidationProtocolFeeChangedEntity
  @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldFee: BigInt!
  newFee: BigInt!
}
type PoolConfiguratorReserveActiveEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  active: Boolean!
}
type PoolConfiguratorReserveAuctionStrategyChangedEntity
  @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldStrategy: Bytes!
  newStrategy: Bytes!
}
type PoolConfiguratorReserveBorrowingEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  enabled: Boolean!
}
type PoolConfiguratorReserveDroppedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
}
type PoolConfiguratorReserveFactorChangedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldReserveFactor: BigInt!
  newReserveFactor: BigInt!
}
type PoolConfiguratorReserveFrozenEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  frozen: Boolean!
}
type PoolConfiguratorReserveInitializedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  xToken: Bytes!
  variableDebtToken: Bytes!
  interestRateStrategyAddress: Bytes!
}
type PoolConfiguratorReserveInterestRateStrategyChangedEntity
  @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldStrategy: Bytes!
  newStrategy: Bytes!
}
type PoolConfiguratorReservePausedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  paused: Boolean!
}
type PoolConfiguratorSiloedBorrowingChangedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldState: Boolean!
  newState: Boolean!
}
type PoolConfiguratorSupplyCapChangedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  oldSupplyCap: BigInt!
  newSupplyCap: BigInt!
}
type PoolConfiguratorVariableDebtTokenUpgradedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  proxy: Bytes!
  implementation: Bytes!
}
type PoolConfiguratorXTokenUpgradedEntity @entity(immutable: true) {
  block: BigInt!
  transactionHash: Bytes!
  msgSender: Bytes! #address
  msgValue: BigInt!
  id: ID!
  asset: Bytes!
  proxy: Bytes!
  implementation: Bytes!
}

type SummaryData @entity {
  id: ID!
  apeStaking: ApeStakingSummary!
  liquidation: LiquidationSummary!
  shop: ShopSummary!
  lending: LendingSummary!
}

type ApeStakingSummary @entity {
  id: ID!
  apeCoinStaked: BigInt!
}

type DashboardStake @entity {
  id: ID!
  poolId: BigInt!
  tokenId: BigInt!
  deposited: BigInt!
  MainTokenId: BigInt!
  MainPoolId: BigInt!
}

type LiquidationSummary @entity {
  id: ID!
  inLiquidation: BigInt!
  inAuction: BigInt!
}

type ShopSummary @entity {
  id: ID!
  availableNFT: BigInt!
  purchased: BigInt!
  volume: BigInt!
}

type LendingSummary @entity {
  id: ID!
  totalSuppliedNFT: BigInt!
  totalSupply: BigInt!
  totalBorrow: BigInt!
}

type Timelock @entity {
  id: ID!
  blockHeight: Int!
  agreementId: Int!
  timeAdded: Int!
  actionType: Int!
  assetInfo: TimelockAssetInfo!
  transaction: Bytes!
  expectedRelease: Int!
  status: Int!
  beneficiary: Bytes @search
}

type TimelockAssetInfo @entity {
  id: ID!
  type: Int!
  token: Bytes!
  tokenIds: [BigInt!]
  amount: BigInt!
}

type Asset @entity {
  id: ID!
  token: Bytes!
  tokenId: BigInt!
  amount: BigInt!
  inPool: Boolean!
  inStake: Boolean!
}

type Account @entity {
  id: ID!
  address: Bytes!
  collateral: BigInt!
  collateralAssets: [Asset!]!
  debt: BigInt!
  debtAssets: [Asset!]!
  healthFactor: BigInt!
}
